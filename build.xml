<?xml version="1.0" encoding="ISO-8859-15"?>
<!--*******************************{begin:header}******************************
               spssio - https://github.com/jani-hautamaki/spssio               
*******************************************************************************

        Java classes for reading and writing
        SPSS/PSPP Portable and System files
  
        Copyright (C) 2013-2016 Jani Hautamaki <jani.hautamaki@hotmail.com>
  
        Licensed under the terms of GNU General Public License v3.
  
        You should have received a copy of the GNU General Public License v3
        along with this program as the file LICENSE.txt; if not, please see
        http://www.gnu.org/licenses/gpl-3.0.html
  
**********************************{end:header}******************************-->

<project name="spssio" default="build" basedir=".">

  <!-- Description; just point at the Google Code web page -->
  <description>https://code.google.com/p/spssio/</description>

  <!-- =================================================================== -->
  <!-- Configuration constants                                             -->
  <!-- =================================================================== -->

  <!-- Instantiate DSTAMP (has format: yyyyMMdd) -->
  <tstamp />

  <!-- Instantiate timestamp for build.time property -->
  <tstamp>
    <format property="build.time" pattern="yyyy-MM-dd HH:mm Z" />
  </tstamp>

  <!-- Base name for directories and packages -->
  <property name="base.name"                  value="spssio" />

  <!-- Version number used in the distribution package name -->
  <property name="version"                    value="0.4.7" />

  <!-- =================================================================== -->
  <!-- Directory layout: root INPUT directories                            -->
  <!-- =================================================================== -->

  <!-- Directory for all source codes -->
  <property name="sources.dir"                value="src" />

  <!-- Third-party .jar files automatically included in classpath -->
  <property name="lib.dir"                    value="lib" />

  <!-- Java source code directory -->
  <property name="jsources.dir"               value="${sources.dir}/java" />

  <!-- Script templates directory -->
  <property name="templ.dir"                  value="${sources.dir}/templ" />

  <!-- =================================================================== -->
  <!-- Directory layout: root OUTPUT directories                           -->
  <!-- =================================================================== -->

  <!-- Build root directory for compiled code -->
  <property name="build.dir"                  value="build" />

  <!-- Build root directory for bin scripts -->
  <property name="bin.dir"                    value="bin" />

  <!-- Build directory for all generated javadocs -->
  <property name="javadoc.dir"                value="javadoc" />

  <!-- Directory for the distributable package -->
  <property name="dist.dir"                   value="dist" />

  <!-- =================================================================== -->
  <!-- Specific OUTPUT file names                                          -->
  <!-- =================================================================== -->

  <!-- File name for the class jar package -->
  <property name="jar.file"                   value="${base.name}-${version}.jar" />

  <!-- Redistributable package -->
  <property name="zip.file"                   value="${base.name}-${version}.zip" />

  <property name="nightlyzip.file"            value="${base.name}-${DSTAMP}.zip" />

  <!-- Embed build details to this java source file (in sources.dir) -->
  <property name="buildinfo.file"             value="spssio/BuildInfo.java" />

  <!-- =================================================================== -->
  <!-- Automatic inclusion of all .jar files in the lib.dir                -->
  <!-- =================================================================== -->

  <!-- NOTE: These will have absolute paths -->
  <path id="classpath.lib">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <!-- =================================================================== -->
  <!-- Java compilation options                                            -->
  <!-- =================================================================== -->

  <property name="compile.debug"       value="true" />
  <property name="compile.optimize"    value="true" />
  <property name="compile.target"      value="1.6" />
  <property name="compile.source"      value="1.6" />
  <property name="compile.deprecation" value="true" />

  <!-- =================================================================== -->
  <!-- Compiles "sources.dir" into "build.dir"                             -->
  <!-- =================================================================== -->
  <target name="compile"
          depends=""
          description="Compile the source directory">

    <!-- Assert output dir existence -->
    <mkdir dir="${build.dir}" />

    <!-- Execute javac -->
    <javac srcdir="${jsources.dir}"
           destdir="${build.dir}"
           includeAntRuntime="no"
           fork="no"
           listfiles="yes"
           debug="${compile.debug}"
           optimize="${compile.optimize}"
           target="${compile.target}"
           source="${compile.source}"
           deprecation="${compile.deprecation}">
      <!-- The -classpath argument -->
      <classpath refid="classpath.lib"/>
    </javac>
  </target>

  <!-- =================================================================== -->
  <!-- Jars all "build.dir/**/*.class" into "build.dir/jar.file".          -->
  <!-- Includes the files in "lib.dir/**/*.jar" in the package.            -->
  <!-- =================================================================== -->
  <target name="jar"
          depends="compile"
          description="Create a single jar package">
    <jar destfile="${build.dir}/${jar.file}"
         basedir="${build.dir}"
         includes="**/*.class">
      <zipgroupfileset dir="${lib.dir}" includes="**/*.jar">
        <exclude name="META-INF/*" />
      </zipgroupfileset>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Script files in "bin.dir"                                           -->
  <!-- =================================================================== -->

  <!-- NOTE: These will have absolute paths -->
  <fileset id="templ.fileset" dir="${templ.dir}">
    <include name="*" />
  </fileset>
  <fileset id="templbash.fileset" dir="${templ.dir}">
    <include name="*" />
    <exclude name="*.bat"/>
  </fileset>

  <!-- Convert filesets into properties listing flat filenames only -->
  <pathconvert pathsep=" " property="templ.list" refid="templ.fileset">
    <mapper type="flatten" />
  </pathconvert>
  <pathconvert pathsep=" " property="templbash.list" refid="templbash.fileset">
    <mapper type="flatten" />
  </pathconvert>

  <!-- =================================================================== -->
  <!-- Instantiate scripts from "temp.dir" into "bin.dir"                  -->
  <!-- =================================================================== -->
  <target name="bin"
          depends=""
          description="Instantiate bin scripts">

    <!-- Assert output dir existence -->
    <mkdir dir="${bin.dir}" />

    <!-- Read-filter-write -->
    <copy todir="${bin.dir}" overwrite="true">
      <fileset refid="templ.fileset" />

      <filterchain>
        <tokenfilter>
          <replacestring from="build.dir" to="${build.dir}" />
          <replacestring from="classes.jar" to="${jar.file}" />
        </tokenfilter>
      </filterchain>
    </copy>

    <!-- set +x to bash scripts -->
    <exec executable="chmod" osfamily="unix" dir="${bin.dir}">
      <arg line="a+x ${templbash.list}" />
    </exec>
  </target>

  <!-- =================================================================== -->
  <!-- Default target                                                      -->
  <!-- =================================================================== -->
  <target name="build"
          depends="jar, bin"
          description="Default build target">
  </target>

  <!-- =================================================================== -->
  <!-- Instantiate scripts from "templ.dir" to "." (repository root)       -->
  <!-- =================================================================== -->
  <target name="bin2root"
          depends=""
          description="Install bin scripts to the repository root">
    <copy todir="." overwrite="true">
      <fileset refid="templ.fileset" />

      <filterchain>
        <tokenfilter>
          <replacestring from="../build.dir" to="${build.dir}" />
          <replacestring from="..\build.dir" to="${build.dir}" />
          <replacestring from="classes.jar" to="${jar.file}" />
        </tokenfilter>
      </filterchain>
    </copy>

    <exec executable="chmod" osfamily="unix">
      <arg line="a+x ${templbash.list}" />
    </exec>
  </target>

  <!-- =================================================================== -->
  <!-- Create the distributable directory                                  -->
  <!-- =================================================================== -->
  <target name="dist"
          depends="jar, bin"
          description="Build the distributable directory">

    <!-- Assert output dir existence -->
    <mkdir dir="${dist.dir}" />

    <!-- Directories -->
    <copy todir="${dist.dir}">
      <fileset dir=".">
        <include name="${bin.dir}/**/*" />
        <include name="${lib.dir}/**/*" />
        <include name="${sources.dir}/**/*" />
        <include name="text/**/*" />
      </fileset>
    </copy>

    <!-- Individual files -->
    <copy todir="${dist.dir}" overwrite="true">
      <fileset dir=".">
        <include name="build.xml" />
        <include name="LICENSE.txt" />
        <include name="README.txt" />
        <include name="NOTICES.txt" />
        <include name="${build.dir}/${jar.file}" />
      </fileset>
    </copy>

    <!-- Zip the dist.dir as it were in xmlsnippets-${version} dir -->
    <zip destfile="${build.dir}/${zip.file}" update="true">
      <mappedresources>
        <fileset dir="${dist.dir}"/>
        <globmapper from="*" to="${base.name}-${version}/*"/>
      </mappedresources>
    </zip>
  </target>

  <!-- =================================================================== -->
  <!-- Create Javadoc documentation                                        -->
  <!-- =================================================================== -->
  <target name="javadoc"
          depends=""
          description="compile javadocs">
    <!-- Assert output dir existence -->
    <mkdir dir="${javadoc.dir}" />

    <!-- Compile javadocs -->
    <javadoc      sourcepath="${jsources.dir}"
                  defaultexcludes="yes"
                  destdir="${javadoc.dir}"
                  author="true"
                  version="true"
                  use="true"
                  private="true">
      <!-- Pass argument: -classpath -->
      <classpath refid="classpath.lib"/>
    </javadoc>
  </target>

  <!-- =================================================================== -->
  <!-- Clean all dynamically created directories                           -->
  <!-- =================================================================== -->
  <target name="clean"
          description="clean all dynamically created directories"
          depends="">
    <delete dir="${build.dir}" />
    <delete dir="${bin.dir}" />
    <delete dir="${dist.dir}" />
    <delete dir="${javadoc.dir}" />
    <!-- files by "bin2root" target -->
    <delete>
      <!-- WARNING: This really must be a filelist instead of fileset
           Otherwise, if the templ.dir is empty, all files in the root
           directory will be deleted. A catastrophy. -->
      <filelist dir="." files="${templ.list}" />
    </delete>
  </target>


  <!-- =================================================================== -->
  <!-- Stamp rev info to a source file                                     -->
  <!-- =================================================================== -->
  <target name="tag"
          depends=""
          description="Tag build info">
    <!-- Pull out the tip revision information -->
    <exec executable="hg"
          outputproperty="revision">
      <arg line="tip --template '{rev}:{node|short} ({date|isodate})\n'" />
    </exec>

    <!-- Push it into a source file; a temp file is used -->
    <copy tofile="${jsources.dir}/${buildinfo.file}.new"
          file="${jsources.dir}/${buildinfo.file}"
          overwrite="true">
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="VERSION[ ]*=.*" replace="VERSION = &quot;${version}&quot;;" />
          <replaceregex pattern="REVISION[ ]*=.*" replace="REVISION = &quot;${revision}&quot;;" />
          <replaceregex pattern="TIMESTAMP[ ]*=.*" replace="TIMESTAMP = &quot;${build.time}&quot;;" />
        </tokenfilter>
      </filterchain>
    </copy>
    <!-- Replace original with the temp file -->
    <move file="${jsources.dir}/${buildinfo.file}.new"
          tofile="${jsources.dir}/${buildinfo.file}"
          overwrite="true" />
  </target>

  <!-- =================================================================== -->
  <!-- Unstamp rev info from a source file                                 -->
  <!-- =================================================================== -->
  <target name="untag"
          depends=""
          description="Untag build info">
    <copy tofile="${jsources.dir}/${buildinfo.file}.new"
          file="${jsources.dir}/${buildinfo.file}"
          overwrite="true">
      <filterchain>
        <tokenfilter>
          <replaceregex pattern="VERSION[ ]*=.*" replace="VERSION = null;" />
          <replaceregex pattern="REVISION[ ]*=.*" replace="REVISION = null;" />
          <replaceregex pattern="TIMESTAMP[ ]*=.*" replace="TIMESTAMP = null;" />
        </tokenfilter>
      </filterchain>
    </copy>
    <!-- Replace original with the temp file -->
    <move file="${jsources.dir}/${buildinfo.file}.new"
          tofile="${jsources.dir}/${buildinfo.file}"
          overwrite="true" />
  </target>

  <!-- =================================================================== -->
  <!-- Create a release                                                    -->
  <!-- =================================================================== -->
  <target name="release"
          depends=""
          description="Build a release">

    <!-- Execute the targets in the required order -->
    <antcall target="tag" />
    <antcall target="dist" />
    <antcall target="untag" />
  </target>

  <!-- =================================================================== -->
  <!-- Create a nightly dist package                                       -->
  <!-- =================================================================== -->
  <target name="nightly"
          depends=""
          description="Build a release">

    <!-- Execute the targets in the required order -->
    <antcall target="tag" />
    <antcall target="dist">
        <param name="zip.file" value="${nightlyzip.file}" />
    </antcall>
    <antcall target="untag" />
  </target>

</project>
